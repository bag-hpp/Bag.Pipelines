name: Static Code Analysis dotnet

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: "The .NET SDK version"
        required: true
        type: string 
      gh_runner:
        required: false
        type:     string
        default:  "ubuntu-latest" 
      sonar_project_name:  
        required: true
        type: string           
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      SONAR_PROJECT_KEY:
        required: true
        
jobs:
  static-code-analysis:
    runs-on: ${{ inputs.gh_runner }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0    

      # .NET specific setup
      - name: Set up .NET (dotnet)
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          cache: 'false'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget
          
      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        
      - name: Check if SONAR_HOST_URL is defined
        run: |
          if [ -z "${{ secrets.SONAR_HOST_URL }}" ]; then
            echo "SONAR_HOST_URL is not set!"
            exit 1
          else
            echo "SONAR_HOST_URL is set âœ…"
          fi

      # SonarQube analysis for .NET (adjusted for your case)
      - name: Build and analyze (.NET)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin /k:${{ secrets.SONAR_PROJECT_KEY }} \
            /n:sonar.projectName="${{ inputs.sonar_project_name }}" \
            /v:"1.0" \
            /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            /d:sonar.token=${{ secrets.SONAR_TOKEN }} \
            /d:sonar.branch.name=${{ github.ref_name }}
          dotnet build
          dotnet sonarscanner end
