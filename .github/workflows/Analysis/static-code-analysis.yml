name: Static Code Analysis

on:
  workflow_call:
    inputs:
      runtime:
        description: "Runtime environment (java or dotnet)"
        required: true
        type: string
      java_version:
        description: 'Java version to use'
        required: false
        type: string
      distribution:
        description: "JDK Distribution (e.g. temurin, zulu, corretto, graalvm, oracle)"
        required: false
        type: string
      dotnet_version:
        description: "The .NET SDK version"
        required: false
        type: string 
      gh_runner:
        required: false
        type:     string
        default:  "ubuntu-latest" 
      sonar_project_name:  
        required: true
        type: string           
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      SONAR_PROJECT_KEY:
        required: true
        
jobs:
  analysis:
    runs-on: ${{ inputs.gh_runner }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0    

      # Java specific setup
      - name: Set up JDK (Java)
        if: ${{ inputs.runtime == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.distribution }}
          cache: 'maven'

      # .NET specific setup
      - name: Set up .NET (dotnet)
        if: ${{ inputs.runtime == 'dotnet' }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          cache: 'true'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        if: ${{ inputs.runtime == 'java' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache NuGet packages
        if: ${{ inputs.runtime == 'dotnet' }}
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget

      # SonarQube analysis for Java
      - name: Build and analyze (Java)
        if: ${{ inputs.runtime == 'java' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.projectName="${{ inputs.sonar_project_name }}" \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=${{ github.ref_name }} \

      # SonarQube analysis for .NET (adjusted for your case)
      - name: Build and analyze (.NET)
        if: ${{ inputs.runtime == 'dotnet' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin /k:${{ secrets.SONAR_PROJECT_KEY }} \
            /d:sonar.projectName="${{ inputs.sonar_project_name }}" \
            /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            /d:sonar.token=${{ secrets.SONAR_TOKEN }} \
            /d:sonar.branch.name=${{ github.ref_name }} \
          dotnet build
          dotnet sonarscanner end
